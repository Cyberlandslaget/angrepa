use angrapa::db::Db;
use angrapa::db_connect;
use angrapa::models::ExploitInserter;
use rocket::form::{Form, Strict};
use rocket::serde::json::{json, Value};
use rocket::{post, FromForm};

use crate::runner::exploit::exploit2::docker::DockerInstance;

#[derive(FromForm)]
pub struct ExploitForm<'r> {
    tar: Strict<&'r [u8]>,
    config: Strict<&'r [u8]>,
}

#[post("/upload", data = "<upload>")]
pub async fn upload<'r>(upload: Form<ExploitForm<'r>>) -> Result<Value, ()> {
    let mut db = Db::new(db_connect().unwrap());

    #[derive(serde::Deserialize)]
    struct JsonConfig {
        name: String,
        service: String,
        blacklist: Vec<String>,
    }

    // read data
    let json_config = match serde_json::from_slice(&upload.config) {
        Ok(json_config) => json_config,
        Err(e) => {
            return Ok(json!({ "error": format!("{:?}", e) }));
        }
    };

    let JsonConfig {
        name,
        service,
        blacklist,
    } = json_config;

    // build the exploit
    let docker = DockerInstance::new().unwrap();
    let exploit = docker.new_exploit(&upload.tar).await;

    let exploit = match exploit {
        Ok(exploit) => exploit,
        Err(e) => {
            return Ok(json!({ "error": format!("{:?}", e) }));
        }
    };

    let pool = exploit.spawn_pool().await.unwrap();

    let expl = db
        .add_exploit(&ExploitInserter {
            name,
            service,
            blacklist: blacklist.join("\n"),
            docker_image: pool.image,
            docker_container: pool.container,
            enabled: false,
        })
        .unwrap();

    // save to file
    std::fs::write(
        format!("./data/exploits/{}", expl.id),
        upload.tar.to_owned(),
    )
    .unwrap();

    Ok(json!({ "id": expl.id }))
}

#[post("/start/<id>")]
pub async fn start(id: i32) -> Result<Value, ()> {
    let mut db = Db::new(db_connect().unwrap());

    db.start_exploit(id).unwrap();

    Ok(json!({ "status": "ok" }))
}

#[post("/stop/<id>")]
pub async fn stop(id: i32) -> Result<Value, ()> {
    let mut db = Db::new(db_connect().unwrap());

    db.stop_exploit(id).unwrap();

    Ok(json!({ "status": "ok" }))
}
