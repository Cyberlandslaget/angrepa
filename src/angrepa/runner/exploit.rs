pub mod docker;
use async_trait::async_trait;
use futures::Future;
use std::{error::Error, pin::Pin};

#[derive(Debug, Clone)]
pub struct RunLog {
    pub exit_code: u8,
}

/// An initialized exploit
/// In the case of docker: a container
#[async_trait]
pub trait Exploit {
    type Error: Error;
    /// Start exploit and return a future that results in the output of the exploit
    async fn run(
        &mut self,
        host: String,
        flagid: String,
    ) -> Result<
        (
            Pin<Box<dyn Future<Output = Result<RunLog, Self::Error>> + std::marker::Send>>,
            flume::Receiver<String>,
        ),
        Self::Error,
    >;
}
