pub mod docker;
use async_trait::async_trait;
use std::error::Error;

pub struct RunLog {
    pub output: String,
}

/// An initialized exploit
/// In the case of docker: a container
#[async_trait]
pub trait Exploit {
    type Error: Error;
    type Instance: ExploitInstance;
    /// Start the exploit
    async fn start(&self, host: String, flagid: String) -> Result<Self::Instance, Self::Error>;
}

/// A started exploit
/// In the case of docker: either a handle to a single container, or an exec into a pool
#[async_trait]
pub trait ExploitInstance {
    type Error: Error;
    async fn wait_for_exit(&self) -> Result<RunLog, Self::Error>;
}
