mod docker;
use async_trait::async_trait;
use std::error::Error;

pub struct RunLog {
    pub output: String,
}

/// Backed by an *image*
#[async_trait]
trait Exploit {
    type Error: Error;
    type Instance: ExploitInstance;
    async fn spawn(&self, host: String, flagid: String) -> Result<Self::Instance, Self::Error>;
}

/// Backed by a container *instance*.
/// Can be backed by a shared instance (pool), but this is hidden from the user.
#[async_trait]
trait ExploitInstance {
    type Error: Error;
    async fn wait_for_exit(&self) -> Result<RunLog, Self::Error>;
    //fn kill();
}
