CREATE TABLE service (
    name TEXT PRIMARY KEY
);

CREATE TABLE team (
    ip TEXT PRIMARY KEY,
    name TEXT
);

CREATE TABLE exploit (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    service TEXT NOT NULL,
    blacklist TEXT[] NOT NULL,
    enabled BOOLEAN NOT NULL,
    docker_image TEXT NOT NULL,
    docker_containers TEXT[] NOT NULL,
    pool_size INTEGER NOT NULL,

    FOREIGN KEY (service) REFERENCES service (name)
);

CREATE TABLE target (
    id SERIAL PRIMARY KEY,
    flag_id TEXT NOT NULL,
    service TEXT NOT NULL,
    team TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL,
    target_tick INTEGER NOT NULL,

    FOREIGN KEY (service) REFERENCES service (name),
    FOREIGN KEY (team) REFERENCES team (ip)
);

CREATE TABLE execution (
    id SERIAL PRIMARY KEY,
    exploit_id INTEGER NOT NULL,
    output TEXT NOT NULL,
    exit_code INTEGER NOT NULL,
    started_at TIMESTAMP NOT NULL,
    finished_at TIMESTAMP NOT NULL,
    target_id INTEGER NOT NULL,

    FOREIGN KEY (exploit_id) REFERENCES exploit (id),
    FOREIGN KEY (target_id) REFERENCES target (id)
);

CREATE TABLE flag (
    id SERIAL PRIMARY KEY,
    text TEXT NOT NULL,
    status TEXT NOT NULL,
    submitted BOOLEAN NOT NULL,
    timestamp TIMESTAMP NOT NULL,
    execution_id INTEGER NOT NULL,
    exploit_id INTEGER NOT NULL,

    FOREIGN KEY (execution_id) REFERENCES execution (id),
    FOREIGN KEY (exploit_id) REFERENCES exploit (id)
);

CREATE FUNCTION notify_trigger() RETURNS trigger AS $trigger$
DECLARE
  rec RECORD;
  payload TEXT;
  column_name TEXT;
  column_value TEXT;
  payload_items TEXT[];
BEGIN
  CASE TG_OP
  WHEN 'INSERT', 'UPDATE' THEN
     rec := NEW;
  WHEN 'DELETE' THEN
     rec := OLD;
  ELSE
     RAISE EXCEPTION 'Unknown TG_OP: "%". Should not occur!', TG_OP;
  END CASE;
  
  FOREACH column_name IN ARRAY TG_ARGV LOOP
    EXECUTE format('SELECT $1.%I::TEXT', column_name)
    INTO column_value
    USING rec;
    payload_items := array_append(payload_items, '"' || replace(column_name, '"', '\"') || '":"' || replace(column_value, '"', '\"') || '"');
  END LOOP;

  payload := ''
              || '{'
              || '"timestamp":"' || CURRENT_TIMESTAMP                    || '",'
              || '"operation":"' || TG_OP                                || '",'
              || '"schema":"'    || TG_TABLE_SCHEMA                      || '",'
              || '"table":"'     || TG_TABLE_NAME                        || '",'
              || '"data":{'      || array_to_string(payload_items, ',')  || '}'
              || '}';

  PERFORM pg_notify('db_notifications', payload);
  
  RETURN rec;
END;
$trigger$ LANGUAGE plpgsql;

CREATE TRIGGER target_notify AFTER INSERT OR UPDATE OR DELETE ON target
FOR EACH ROW EXECUTE PROCEDURE notify_trigger(
  'id',
  'flag_id',
  'service',
  'team',
  'created_at',
  'target_tick'
);